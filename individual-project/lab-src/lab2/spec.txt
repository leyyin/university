################################################################
### pseudocode
function loadFromFiles():
    integer id
    string  name, address, birthday
    file fstudents, fgrades
    fstudents.open students.dat
    
    while can read from fstudents do
        string line
        fstudents.read line
        
        id, name, address, birthdate = line.split '|'
        create Student S(id, name, address, birthdate)
        addToRepository(S)
    done
    
    fgrades.open students_grades.dat
    string last_line, line
    integer read_id
    while can read from fgrades do
        integer grade
        string  subject
        
        if not set read_id or not set last_line or last_line is '\n' then
            fstudents.read read_id
        else
            fgrades.read line
            subject, grade = line.split '|'
            
            create Grade G(subject, grade)
            addGradeToStudent(read_id, G)
        done
        
    done
end

function filterAllPassed():
    array[Students] passed
    for each Student S in repository do
        boolean ok = true
        for each Grade G in S do
            if G.getMark() < 5 then
                ok = false
                break
            done
        done
        
        if ok then
            add S to passed
        done
    done
    
    sort passed by overall average
    output passed to file 'students_all_exams.txt'
end

function compareStudentsGrade(S1, S2: Student)
    if S1.getOverallGrade()  == S2.getOverallGrade()
        return S1.getName() < S2.getName()
    end if
    return S1.getOverallGrade() < S2.getOverallGrade()
end

function compareStudentsAge(S1, S2: Student)
    if S1.getAge() == S2.getAge()
        return S1.getName() < S2.getName()
    end if
    return S1.getAge() < S2.getAge()
end

function clearOldFiles()
    delete all *.txt files in the current directory
end
 
 
################################################################
### repository.py

"""
Input: -
Output: students_grades.txt
This function sorts the students by their overall average descending
and saves the data in the students_grades.txt file
"""
void groupByAverageDesc()


"""
Input: -
Output: students_nonpassing.txt
This function filters the students that did not pass the year and subjects they failed
and saves the data in the students_nonpassing.txt file
"""
void filterNonPassing()


"""
Input: -
Output: students_best.txt
This function sorts subjects and their best students and saves the data in the students_best.txt file
"""
void groupByBestStudentsSubject()


"""
Input: -
Output: students_age.txt
This function sorts the students by age and saves the data into the students_age.txt file
"""
void groupByAge()


"""
Input: -
Output: students_all_exams.txt
This function filters the stundets that passed all their exams and sorts them by overall average, then it 
saves the data in the students_all_exams.txt file
"""
void filterPassedAll()

"""
Input: -
Output: -
This function loads expenses from students.dat and students_grades.dat files
"""
void loadFromFiles()


################################################################
### controller.py

"""
Input: -
Output: -
This function is used to load data from the input text files
"""
void loadFromFiles();


"""
Input: -
Output: -
This function is used to sort the students by their overall average, descending
"""
void groupByAverageDesc()


"""
Input: -
Output: -
This function is used to filter the students that did not pass the year and subjects they failed
"""
void filterNonPassing()


"""
Input: -
Output: -
This function is used to sort subjects and their best students
"""
void groupByBestStudentsSubject()


"""
Input: -
Output: -
This function is used to delete all files generated by this program
"""
void clearOldFiles()


"""
Input: -
Output: -
This function is used to sort the students by age and saves the data into the students_age.txt file
"""
void groupByAge()


"""
Input: -
Output: -
This function is used to filter the students that passed all their exams
"""
void filterPassedAll()


################################################################
### main.py

controller.loadFromFiles()
controller.clearOldFiles()

controller.groupByAverageDesc()
controller.filterNonPassing()
controller.groupByBestStudentsSubject()
controller.groupByAge()
controller.filterPassedAll()
