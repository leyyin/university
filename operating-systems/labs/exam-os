randul 1

Sa se scrie un program care creaza 10 threaduri si intretine un array global de 30 de int
fiecare thread de 100 de ori genereaza un numar aleator intre 0 si 29 si incrementeaza pozitia respectiva din array
main tipareste arrayul la sfarsti

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>

#define TN 10
#define N 30

int global[N];
pthread_mutex_t mtx[N];

//pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;

void *increment(void *arg)
{
    //printf("Thread \n");

    int nr = 0;
    while(nr < 100)
    {
        int r = rand() % 30;
        pthread_mutex_lock(&mtx[r]);
        //printf("%d to %d\n", global[r], global[r] + 1);
        global[r]++;
        pthread_mutex_unlock(&mtx[r]);

        nr++;
    }

    return NULL;
}

int main()
{
    srand(time(NULL));

    int i;

    for(i = 0; i < N; i++)
    {
        global[i] = 0;
        pthread_mutex_init(&mtx[i], NULL);
    }

    pthread_t thr[TN];
    for(i = 0; i < TN; i++)
    {
        pthread_create(&thr[i], NULL, increment, NULL);
    }

    for(i = 0; i < TN; i++)
    {
        pthread_join(thr[i], NULL);
    }

    printf("global = ");
    int sum = 0;
    for(i = 0; i < N; i++)
    {
        printf("%d ", global[i]);
        pthread_mutex_destroy(&mtx[i]);
        sum += global[i];
    }

    printf("\nsum = %d \n", sum);


    return 0;
}

Create two processes, client and server that communicate through pipe.The client sends the name of a program to the server and the server sends back the name of one of the users running the program or "none" if nobody is running the program.The client should repeat the operation ten times and display on the console the results received from the server. The server must use a shell script or command in order to process the client's request. The server should run continuously until Ctrl-C is pressed. If necessary, make reasonable assumptions about the size of the content transferred between the client and the server.

60%
---
Implement a program A that allocates a three dimensonal matrix having  as dimensions three numbers received as command line arguments. The matrix is populated with random numbers and the sum of all the elements is printed to the console.  Implement a program B that creates a child process,  in which the program A is run with three random numbers between 2 and 10 as arguments, using one of the "exec" functions.







